USE p1700
GO

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_INSERTA_ERRORES_PROCEDIMIENTO
GO

CREATE PROCEDURE SP_INSERTA_ERRORES_PROCEDIMIENTO
	
	@BLOQUE			INT,
	@NUMERO_ERROR	INT,
	@IMPORTANCIA	INT,
	@ESTADO			INT,
	@PROCEDIMIENTO	NVARCHAR(200),
	@LINEA			INT,
	@MENSAJE_BD		NVARCHAR(2000),
	@MENSAJE		NVARCHAR(200)

AS BEGIN

	-- INICIO DE LA TRANSACCION
    BEGIN TRANSACTION;

	INSERT INTO ERRORES_PROCEDIMIENTO 
		(BLOQUE, NUMERO_ERROR, IMPORTANCIA, ESTADO, PROCEDIMIENTO, LINEA, MENSAJE_BD, MENSAJE) 
	VALUES 
		(@BLOQUE, @NUMERO_ERROR, @IMPORTANCIA, @ESTADO, @PROCEDIMIENTO, @LINEA, @MENSAJE_BD, @MENSAJE);

	-- CONFIRMA TRANSACCION
    COMMIT TRANSACTION;


END

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_OBTENER_EMPLEADOS
GO

-- FECHA DE CREACION: 28/09/2024
-- DETALLE: PROCEDIMIENTO PARA OBTENER LOS EMPLEADOS
CREATE PROCEDURE SP_OBTENER_EMPLEADOS
	
	@ID_EMPLEADO INT

AS BEGIN

	--DECLARACIONES DE VARIABLES DE ERROR
	DECLARE @ERROR_MENSAGE			NVARCHAR(200)	--MENSAJE DE ERROR
	DECLARE @ERROR_BLOQUE			INT				--BLOQUE DEL ERROR
	DECLARE @ERROR_NUMERO			INT				--CODIGO DEL ERROR
	DECLARE @ERROR_IMPORTANCIA		INT				--DESCRIPCION DE LA SEVERIDAD DEL ERROR
    DECLARE @ERROR_ESTADO			INT				--DESCRIPCION DEL ESTADO
    DECLARE @ERROR_PROCEDIMIENTO	NVARCHAR(200)	--DESCRIPCION DEL PROCEDIMIENTO
    DECLARE @ERROR_LINEA			INT 			--LINEA DEL ERROR
    DECLARE @ERROR_MENSAGE_DB		NVARCHAR(2000)	--DECRIPCION DEL ERROR

	SET @ERROR_MENSAGE = N'ERROR';

BEGIN TRY

	-- OBTENER VARIOS EMPLEADOS O UN SOLO EMPLEADO DEPENDIENDO DEL ID
	IF @ID_EMPLEADO = 0
	BEGIN

		SET @ERROR_BLOQUE = 0;
		SET @ERROR_MENSAGE = N'ERROR AL OBTENER REGISTROS';

		SELECT 
			[NOMBRE], [TELEFONO], [FECHA_INCLUSION], [TIPO], [SALARIO], [SUPERVISOR] 
		FROM 
			[EMPLEADOS_VISTA];

	END ELSE
	BEGIN

		SET @ERROR_BLOQUE = 1;
		SET @ERROR_MENSAGE = N'ERROR AL OBTENER REGISTRO ID: ' + CONVERT(CHAR(5), @ID_EMPLEADO);

		SELECT 
			[NOMBRE], [TELEFONO], [FECHA_INCLUSION], [TIPO], [SALARIO], [SUPERVISOR] 
		FROM 
			[EMPLEADOS_VISTA]
		WHERE 
			[ID_EMPLEADO] = @ID_EMPLEADO;

	END


END TRY
BEGIN CATCH

	--SETEO DE VARIABLES
	SET @ERROR_NUMERO		  = ERROR_NUMBER();
	SET @ERROR_IMPORTANCIA	  = ERROR_SEVERITY();
	SET @ERROR_ESTADO		  = ERROR_STATE();
	SET @ERROR_PROCEDIMIENTO  = ERROR_PROCEDURE();
	SET @ERROR_LINEA		  = ERROR_LINE();
	SET @ERROR_MENSAGE_DB	  = ERROR_MESSAGE();

	--INSERTA LOS ERRORES DEL PROCEDIMIENTO 
	EXECUTE SP_INSERTA_ERRORES_PROCEDIMIENTO
							@ERROR_BLOQUE,
							@ERROR_NUMERO,
							@ERROR_IMPORTANCIA,
							@ERROR_ESTADO,
							@ERROR_PROCEDIMIENTO,
							@ERROR_LINEA,
							@ERROR_MENSAGE_DB,
							@ERROR_MENSAGE

END CATCH

END

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_OBTENER_CANTIDAD_EMPLEADOS_SUPERVISADOS
GO

-- FECHA DE CREACION: 28/09/2024
-- DETALLE: PROCEDIMIENTO PARA OBTENER LA CANTIDAD DE EMPLEADOS POR SUPERVISOR
CREATE PROCEDURE SP_OBTENER_CANTIDAD_EMPLEADOS_SUPERVISADOS
	
AS BEGIN

	--DECLARACIONES DE VARIABLES DE ERROR
	DECLARE @ERROR_MENSAGE			NVARCHAR(200)	--MENSAJE DE ERROR
	DECLARE @ERROR_BLOQUE			INT				--BLOQUE DEL ERROR
	DECLARE @ERROR_NUMERO			INT				--CODIGO DEL ERROR
	DECLARE @ERROR_IMPORTANCIA		INT				--DESCRIPCION DE LA SEVERIDAD DEL ERROR
    DECLARE @ERROR_ESTADO			INT				--DESCRIPCION DEL ESTADO
    DECLARE @ERROR_PROCEDIMIENTO	NVARCHAR(200)	--DESCRIPCION DEL PROCEDIMIENTO
    DECLARE @ERROR_LINEA			INT 			--LINEA DEL ERROR
    DECLARE @ERROR_MENSAGE_DB		NVARCHAR(2000)	--DECRIPCION DEL ERROR

	SET @ERROR_MENSAGE = N'ERROR';

BEGIN TRY

	-- INICIO DE LA TRANSACCIÓN
    BEGIN TRANSACTION;


	SELECT 
        EMPLEADO.[NOMBRE] AS SUPERVISOR, 
        COUNT(SUPERVISOR.ID_EMPLEADO) AS CANTIDAD_SUPERVISADOS
    FROM 
        EMPLEADOS_VISTA EMPLEADO
    LEFT JOIN 
        EMPLEADOS_VISTA SUPERVISOR ON EMPLEADO.ID_EMPLEADO = SUPERVISOR.ID_SUPERVISOR
    GROUP BY 
        EMPLEADO.[NOMBRE]
	HAVING 
		COUNT(SUPERVISOR.ID_EMPLEADO) > 0;


        
    -- CONFIRMA TRANSACCION
    COMMIT TRANSACTION;


END TRY
BEGIN CATCH

	--SETEO DE VARIABLES
	SET @ERROR_NUMERO		  = ERROR_NUMBER();
	SET @ERROR_IMPORTANCIA	  = ERROR_SEVERITY();
	SET @ERROR_ESTADO		  = ERROR_STATE();
	SET @ERROR_PROCEDIMIENTO  = ERROR_PROCEDURE();
	SET @ERROR_LINEA		  = ERROR_LINE();
	SET @ERROR_MENSAGE_DB	  = ERROR_MESSAGE();

	--INSERTA LOS ERRORES DEL PROCEDIMIENTO 
	EXECUTE SP_INSERTA_ERRORES_PROCEDIMIENTO
							@ERROR_BLOQUE,
							@ERROR_NUMERO,
							@ERROR_IMPORTANCIA,
							@ERROR_ESTADO,
							@ERROR_PROCEDIMIENTO,
							@ERROR_LINEA,
							@ERROR_MENSAGE_DB,
							@ERROR_MENSAGE

END CATCH

END

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_MANTENIMIENTO_EMPLEADOS
GO

-- FECHA DE CREACION: 28/09/2024
-- DETALLE: PROCEDIMIENTO PARA REALIZAR EL CRUD A LA TABLA DE EMPLEADOS
CREATE PROCEDURE SP_MANTENIMIENTO_EMPLEADOS
	
	@ID_EMPLEADO INT,
	@NOMBRE VARCHAR(100),
	@TELEFONO VARCHAR(20),
	@SALARIO DECIMAL(11,2),
	@ES_SUPERVISOR BIT,
	@ID_USUARIO INT,
	@ID_TIENDA INT,
	@ID_SUPERVISOR INT,

	@CEDULA_INCLUSION VARCHAR(20),
	@ACCION SMALLINT

AS BEGIN

	--DECLARACIONES DE VARIABLES DE ERROR
	DECLARE @ERROR_MENSAGE			NVARCHAR(200)	--MENSAJE DE ERROR
	DECLARE @ERROR_BLOQUE			INT				--BLOQUE DEL ERROR
	DECLARE @ERROR_NUMERO			INT				--CODIGO DEL ERROR
	DECLARE @ERROR_IMPORTANCIA		INT				--DESCRIPCION DE LA SEVERIDAD DEL ERROR
    DECLARE @ERROR_ESTADO			INT				--DESCRIPCION DEL ESTADO
    DECLARE @ERROR_PROCEDIMIENTO	NVARCHAR(200)	--DESCRIPCION DEL PROCEDIMIENTO
    DECLARE @ERROR_LINEA			INT 			--LINEA DEL ERROR
    DECLARE @ERROR_MENSAGE_DB		NVARCHAR(2000)	--DECRIPCION DEL ERROR

	SET @ERROR_MENSAGE = N'ERROR';

BEGIN TRY

	SET NOCOUNT ON;
    SET XACT_ABORT ON; -- Esto asegura que la transacción se aborte automáticamente en caso de error.

    DECLARE @RESULTADO INT;

	-- INICIO DE LA TRANSACCIÓN
    BEGIN TRANSACTION;


	-- 0: INSERT, 1: UPDATE, 2: *DELETE
	IF @ACCION = 0
	BEGIN

		SET @ERROR_BLOQUE = 0;
		SET @ERROR_MENSAGE = N'ERROR AL INSERTAR REGISTRO';

		INSERT INTO EMPLEADOS 
			(NOMBRE, TELEFONO, SALARIO, ES_SUPERVISOR, ID_USUARIO, ID_TIENDA, ID_SUPERVISOR, CEDULA_INCLUSION) 
		VALUES 
			(@NOMBRE, @TELEFONO, @SALARIO, @ES_SUPERVISOR, @ID_USUARIO, @ID_TIENDA, @ID_SUPERVISOR, @CEDULA_INCLUSION);

	END ELSE IF @ACCION = 1
	BEGIN
		SET @ERROR_BLOQUE = 1;
		SET @ERROR_MENSAGE = N'ERROR AL ACTUALIZAR REGISTRO, CÓDIGO: ' + CONVERT(CHAR(5), @ID_EMPLEADO);

		UPDATE EMPLEADOS
		SET
			NOMBRE = @NOMBRE,
			TELEFONO = @TELEFONO,
			SALARIO = @SALARIO,
			ES_SUPERVISOR = @ES_SUPERVISOR,
			ID_USUARIO = @ID_USUARIO,
			ID_TIENDA = @ID_TIENDA,
			ID_SUPERVISOR = @ID_SUPERVISOR
		WHERE
			ID_EMPLEADO = @ID_EMPLEADO;

	END ELSE IF @ACCION = 2
	BEGIN
		SET @ERROR_BLOQUE = 2;
		SET @ERROR_MENSAGE = N'ERROR AL ELIMINAR REGISTRO, CÓDIGO: ' + CONVERT(CHAR(5), @ID_EMPLEADO);
		
		UPDATE EMPLEADOS
		SET
			ESTADO = 0
		WHERE
			ID_EMPLEADO = @ID_EMPLEADO;

	END

        
    -- CONFIRMA TRANSACCION
    COMMIT TRANSACTION;

	SET @RESULTADO = 1;

END TRY
BEGIN CATCH

	--SETEO DE VARIABLES
	SET @ERROR_NUMERO		  = ERROR_NUMBER();
	SET @ERROR_IMPORTANCIA	  = ERROR_SEVERITY();
	SET @ERROR_ESTADO		  = ERROR_STATE();
	SET @ERROR_PROCEDIMIENTO  = ERROR_PROCEDURE();
	SET @ERROR_LINEA		  = ERROR_LINE();
	SET @ERROR_MENSAGE_DB	  = ERROR_MESSAGE();

	-- REVERTIR LA TRANSACCION EN CASO DE ERROR
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

	--INSERTA LOS ERRORES DEL PROCEDIMIENTO 
	EXECUTE SP_INSERTA_ERRORES_PROCEDIMIENTO
							@ERROR_BLOQUE,
							@ERROR_NUMERO,
							@ERROR_IMPORTANCIA,
							@ERROR_ESTADO,
							@ERROR_PROCEDIMIENTO,
							@ERROR_LINEA,
							@ERROR_MENSAGE_DB,
							@ERROR_MENSAGE

	SET @RESULTADO = 0;

END CATCH

SELECT @RESULTADO AS Resultado;

END

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_MANTENIMIENTO_USUARIOS
GO

-- FECHA DE CREACION: 28/09/2024
-- DETALLE: PROCEDIMIENTO PARA REALIZAR EL CRUD A LA TABLA DE USUARIOS
CREATE PROCEDURE SP_MANTENIMIENTO_USUARIOS
	
	@ID_USUARIO INT,
	@CEDULA VARCHAR(20),
	@CONTRASENIA VARCHAR(100),
	@ID_PERFIL INT,

	@CEDULA_INCLUSION VARCHAR(20),
	@ACCION SMALLINT

AS BEGIN

	--DECLARACIONES DE VARIABLES DE ERROR
	DECLARE @ERROR_MENSAGE			NVARCHAR(200)	--MENSAJE DE ERROR
	DECLARE @ERROR_BLOQUE			INT				--BLOQUE DEL ERROR
	DECLARE @ERROR_NUMERO			INT				--CODIGO DEL ERROR
	DECLARE @ERROR_IMPORTANCIA		INT				--DESCRIPCION DE LA SEVERIDAD DEL ERROR
    DECLARE @ERROR_ESTADO			INT				--DESCRIPCION DEL ESTADO
    DECLARE @ERROR_PROCEDIMIENTO	NVARCHAR(200)	--DESCRIPCION DEL PROCEDIMIENTO
    DECLARE @ERROR_LINEA			INT 			--LINEA DEL ERROR
    DECLARE @ERROR_MENSAGE_DB		NVARCHAR(2000)	--DECRIPCION DEL ERROR

	SET @ERROR_MENSAGE = N'ERROR';

BEGIN TRY

	SET NOCOUNT ON;
    SET XACT_ABORT ON; -- Esto asegura que la transacción se aborte automáticamente en caso de error.

    DECLARE @RESULTADO INT;

	-- INICIO DE LA TRANSACCIÓN
    BEGIN TRANSACTION;


	-- 0: INSERT, 1: UPDATE, 2: *DELETE
	IF @ACCION = 0
	BEGIN

		SET @ERROR_BLOQUE = 0;
		SET @ERROR_MENSAGE = N'ERROR AL INSERTAR REGISTRO';

		INSERT INTO USUARIOS 
			(CEDULA, CONTRASENIA, ID_PERFIL, CEDULA_INCLUSION) 
		VALUES 
			(@CEDULA, @CONTRASENIA, @ID_PERFIL, @CEDULA_INCLUSION);

	END ELSE IF @ACCION = 1
	BEGIN
		SET @ERROR_BLOQUE = 1;
		SET @ERROR_MENSAGE = N'ERROR AL ACTUALIZAR REGISTRO, CÓDIGO: ' + CONVERT(CHAR(5), @ID_USUARIO);

		UPDATE USUARIOS
		SET
			CEDULA = @CEDULA,
			CONTRASENIA = @CONTRASENIA,
			ID_PERFIL = @ID_PERFIL
		WHERE
			ID_USUARIO = @ID_USUARIO;

	END ELSE IF @ACCION = 2
	BEGIN
		SET @ERROR_BLOQUE = 2;
		SET @ERROR_MENSAGE = N'ERROR AL ELIMINAR REGISTRO, CÓDIGO: ' + CONVERT(CHAR(5), @ID_USUARIO);
		
		UPDATE USUARIOS
		SET
			ESTADO = 0
		WHERE
			ID_USUARIO = @ID_USUARIO;

	END

        
    -- CONFIRMA TRANSACCION
    COMMIT TRANSACTION;

	SET @RESULTADO = 1;

END TRY
BEGIN CATCH

	--SETEO DE VARIABLES
	SET @ERROR_NUMERO		  = ERROR_NUMBER();
	SET @ERROR_IMPORTANCIA	  = ERROR_SEVERITY();
	SET @ERROR_ESTADO		  = ERROR_STATE();
	SET @ERROR_PROCEDIMIENTO  = ERROR_PROCEDURE();
	SET @ERROR_LINEA		  = ERROR_LINE();
	SET @ERROR_MENSAGE_DB	  = ERROR_MESSAGE();

	-- REVERTIR LA TRANSACCION EN CASO DE ERROR
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

	--INSERTA LOS ERRORES DEL PROCEDIMIENTO 
	EXECUTE SP_INSERTA_ERRORES_PROCEDIMIENTO
							@ERROR_BLOQUE,
							@ERROR_NUMERO,
							@ERROR_IMPORTANCIA,
							@ERROR_ESTADO,
							@ERROR_PROCEDIMIENTO,
							@ERROR_LINEA,
							@ERROR_MENSAGE_DB,
							@ERROR_MENSAGE

	SET @RESULTADO = 0;

END CATCH

SELECT @RESULTADO AS Resultado;

END
GO

---------------------------------------------------------

DROP PROCEDURE IF EXISTS SP_REGISTRAR_USUARIO
GO

-- FECHA DE CREACION: 28/09/2024
-- DETALLE: PROCEDIMIENTO PARA REGISTRAR UN USUARIO EN TABLA USUARIOS Y EMPLEADOS
CREATE PROCEDURE SP_REGISTRAR_USUARIO
	
	@CEDULA VARCHAR(20),
	@CONTRASENIA VARCHAR(100),
	@NOMBRE VARCHAR(100),
	@ID_PERFIL INT,
	@ID_TIENDA INT

AS BEGIN

	--DECLARACIONES DE VARIABLES DE ERROR
	DECLARE @ERROR_MENSAGE			NVARCHAR(200)	--MENSAJE DE ERROR
	DECLARE @ERROR_BLOQUE			INT				--BLOQUE DEL ERROR
	DECLARE @ERROR_NUMERO			INT				--CODIGO DEL ERROR
	DECLARE @ERROR_IMPORTANCIA		INT				--DESCRIPCION DE LA SEVERIDAD DEL ERROR
    DECLARE @ERROR_ESTADO			INT				--DESCRIPCION DEL ESTADO
    DECLARE @ERROR_PROCEDIMIENTO	NVARCHAR(200)	--DESCRIPCION DEL PROCEDIMIENTO
    DECLARE @ERROR_LINEA			INT 			--LINEA DEL ERROR
    DECLARE @ERROR_MENSAGE_DB		NVARCHAR(2000)	--DECRIPCION DEL ERROR

	SET @ERROR_MENSAGE = N'ERROR';

BEGIN TRY

	SET NOCOUNT ON;
    SET XACT_ABORT ON; -- Esto asegura que la transacción se aborte automáticamente en caso de error.

    DECLARE @RESULTADO INT;

	-- INICIO DE LA TRANSACCIÓN
    BEGIN TRANSACTION;


		SET @ERROR_BLOQUE = 0;
		SET @ERROR_MENSAGE = N'ERROR AL INSERTAR REGISTRO';

		INSERT INTO USUARIOS 
			(CEDULA, CONTRASENIA, ID_PERFIL) 
		VALUES 
			(@CEDULA, @CONTRASENIA, @ID_PERFIL);

		DECLARE @ID_USUARIO INT = (SELECT TOP(1) ID_USUARIO FROM USUARIOS ORDER BY ID_USUARIO DESC);

		INSERT INTO EMPLEADOS 
			(NOMBRE, ID_TIENDA, ID_USUARIO) 
		VALUES 
			(@NOMBRE, @ID_TIENDA, @ID_USUARIO);

	
    -- CONFIRMA TRANSACCION
    COMMIT TRANSACTION;


	SET @RESULTADO = 1;

END TRY
BEGIN CATCH

	--SETEO DE VARIABLES
	SET @ERROR_NUMERO		  = ERROR_NUMBER();
	SET @ERROR_IMPORTANCIA	  = ERROR_SEVERITY();
	SET @ERROR_ESTADO		  = ERROR_STATE();
	SET @ERROR_PROCEDIMIENTO  = ERROR_PROCEDURE();
	SET @ERROR_LINEA		  = ERROR_LINE();
	SET @ERROR_MENSAGE_DB	  = ERROR_MESSAGE();

	-- REVERTIR LA TRANSACCION EN CASO DE ERROR
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION;

	--INSERTA LOS ERRORES DEL PROCEDIMIENTO 
	EXECUTE SP_INSERTA_ERRORES_PROCEDIMIENTO
							@ERROR_BLOQUE,
							@ERROR_NUMERO,
							@ERROR_IMPORTANCIA,
							@ERROR_ESTADO,
							@ERROR_PROCEDIMIENTO,
							@ERROR_LINEA,
							@ERROR_MENSAGE_DB,
							@ERROR_MENSAGE

	SET @RESULTADO = 0;

END CATCH

SELECT @RESULTADO AS Resultado;

END
GO

---------------------------------------------------------

